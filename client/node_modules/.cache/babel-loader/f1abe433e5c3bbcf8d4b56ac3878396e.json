{"ast":null,"code":"var _jsxFileName = \"/Users/shaulgittelman/Desktop/fullstack/Cakes/client/src/components/auth/RegisterModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      email: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const _this$state = this.state,\n            name = _this$state.name,\n            email = _this$state.email,\n            password = _this$state.password; // Create user object\n\n      const newUser = {\n        name,\n        email,\n        password\n      }; // Attempt to register\n\n      this.props.register(newUser);\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const _this$props = this.props,\n          error = _this$props.error,\n          isAuthenticated = _this$props.isAuthenticated;\n\n    if (error !== prevProps.error) {\n      // Check for register error\n      if (error.id === 'REGISTER_FAIL') {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // Toggle off if registration succedded\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      className: \"RegisterBtn\",\n      onClick: this.toggle,\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"REGISTER\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"REGISTER\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.msg ? React.createElement(Alert, {\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.msg) : null, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Register\"))))));\n  }\n\n}\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["/Users/shaulgittelman/Desktop/fullstack/Cakes/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","clearErrors","RegisterModal","state","modal","name","email","password","msg","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n    state = {\n        modal: false,\n        name: '',\n        email: '',\n        password:'',\n        msg: null\n    };\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        register: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n\n    }\n\n    componentDidUpdate(prevProps){\n        const {error, isAuthenticated}  = this.props;\n        if(error !== prevProps.error){\n            // Check for register error\n            if(error.id === 'REGISTER_FAIL'){\n                this.setState({msg: error.msg.msg});\n            } else {\n                this.setState({ msg: null });\n            }\n        }\n        \n        // Toggle off if registration succedded\n        if(this.state.modal){\n            if(isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        this.props.clearErrors();\n        this.setState({\n        modal: !this.state.modal\n        });\n    }   \n\n    onChange = (e) => {\n        this.setState({[e.target.name] : e.target.value});\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        const { name, email, password } = this.state;\n\n        // Create user object\n        const newUser = {\n            name,\n            email,\n            password\n        };\n\n        // Attempt to register\n        this.props.register(newUser);\n    }\n\n    render(){\n        return(\n            <div>\n                <NavLink className=\"RegisterBtn\" onClick={this.toggle} href=\"#\">\n                    REGISTER\n                </NavLink>\n                <Modal\n                    isOpen={this.state.modal}\n                    toggle={this.toggle}\n                    >\n                <ModalHeader toggle={this.toggle}>\n                    REGISTER\n                </ModalHeader>\n                <ModalBody>\n                    { this.state.msg ? <Alert color=\"danger\">{ this.state.msg }</Alert> : null}\n                    <Form onSubmit={this.onSubmit}>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input\n                            type=\"text\"\n                            name=\"name\"\n                            id=\"name\"\n                            placeholder=\"Name\"\n                            className ='mb-3'\n                            onChange={this.onChange}>\n                            </Input>\n\n                            <Label for=\"email\">Email</Label>\n                            <Input\n                            type='email'\n                            name='email'\n                            id='email'\n                            placeholder='Email'\n                            className ='mb-3'\n                            onChange={this.onChange}>\n                            </Input>\n\n                            <Label for=\"password\">Password</Label>\n                            <Input\n                            type='password'\n                            name='password'\n                            id='password'\n                            placeholder=\"Password\"\n                            className ='mb-3'\n                            onChange={this.onChange}>\n                            </Input>\n\n                            <Button \n                            color=\"dark\"\n                            style={{marginTop: '2rem'}}\n                            block>\n                            Register</Button>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n})\n\nexport default connect(\n    mapStateToProps, \n    { register, clearErrors }\n    )(RegisterModal);"]},"metadata":{},"sourceType":"module"}