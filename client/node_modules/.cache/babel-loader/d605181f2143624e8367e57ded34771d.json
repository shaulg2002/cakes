{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } // Request body\n\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //Get token from localstorage\n  const token = getState().auth.token;\n  token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkN…TQzfQ.6qrqHauZ_SMjT9wMWxu7Tp30Vfe_Q7RP9TjeAOKauC\"; //Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    } // If token, add to headers\n\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}; // Logout user\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    } // Request body\n\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};","map":{"version":3,"sources":["/Users/shaulgittelman/Desktop/fullstack/Cakes/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","token","auth","logout","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n    \n    // User loading\n    dispatch( {type: USER_LOADING});\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n    .then(res => dispatch({\n        type: USER_LOADED,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n            type: AUTH_ERROR\n        })\n    });\n};\n\n// Register User\nexport const register = ({ name, email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({ name, email, password });\n\n    axios.post('/api/users', body, config)\n    .then(res => dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    })\n}\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n        //Get token from localstorage\n        const token = getState().auth.token;\n\n        token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjVkN…TQzfQ.6qrqHauZ_SMjT9wMWxu7Tp30Vfe_Q7RP9TjeAOKauC\";\n\n        //Headers\n        const config = {\n            headers: {\n                \"Content-type\":\"application/json\"\n            }\n        }\n    \n        // If token, add to headers\n        if(token) {\n            config.headers['x-auth-token']=token;\n        }\n\n        return config;\n}\n\n// Logout user\nexport const logout = () => {\n    return{\n    type: LOGOUT_SUCCESS\n};\n};\n\nexport const login = ({ email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    // Request body\n    const body = JSON.stringify({ email, password });\n\n    axios.post('/api/auth', body, config)\n    .then(res => dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    })\n}\n\n\n"]},"metadata":{},"sourceType":"module"}